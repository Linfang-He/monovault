syntax = "proto3";

package rpc;

enum VaultFileType {
  File = 0;
  Directory = 1;
}

message Empty {
}

message Size {
  uint32 value = 1;
}

message Inode {
  uint64 value = 1;
}

message FileInfo {
  uint64 inode = 1;
  string name = 2;
  VaultFileType kind = 3;
  uint64 size = 4;
  uint64 atime = 5;
  uint64 mtime = 6;
  uint64 version = 7;
}

message DirEntryList {
  repeated FileInfo list = 1;
}

message FileToRead {
  uint64 file = 1;
  int64 offset = 2;
  uint32 size = 3;
}

message FileToWrite {
  uint64 file = 1;
  int64 offset = 2;
  bytes data = 3;
}

message FileToCreate {
  uint64 parent = 1;
  string name = 2;
  VaultFileType kind = 3;
}

message FileToOpen {
  enum OpenMode {
    R = 0;
    RW = 1;
  }
  uint64 file = 1;
  OpenMode mode = 2;
}

message DataChunk {
  bytes payload = 1;
}

service VaultRPC {
  rpc attr(Inode) returns (FileInfo);
  rpc read(FileToRead) returns (stream DataChunk);
  rpc write(stream FileToWrite) returns (Size);
  rpc create(FileToCreate) returns (Inode);
  rpc open(FileToOpen) returns (Empty);
  rpc close(Inode) returns (Empty);
  rpc delete(Inode) returns (Empty);
  rpc readdir(Inode) returns (DirEntryList);
}
